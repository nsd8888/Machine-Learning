{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9d0b5ea7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import keras\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a9e6822b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing the mnist fashion dataet\n",
    "from keras.datasets import fashion_mnist\n",
    "(x_train,y_train),(x_test,y_test)=fashion_mnist.load_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a64f0955",
   "metadata": {},
   "outputs": [],
   "source": [
    "#since each image pixle consist of 255 numbers.........we perform an an minmax operation on each pixle.\n",
    "x_train=x_train/255\n",
    "x_test=x_test/255"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "66c762b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.00392157, 0.        , 0.        ,\n",
       "        0.05098039, 0.28627451, 0.        , 0.        , 0.00392157,\n",
       "        0.01568627, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.00392157, 0.00392157, 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.01176471, 0.        , 0.14117647,\n",
       "        0.53333333, 0.49803922, 0.24313725, 0.21176471, 0.        ,\n",
       "        0.        , 0.        , 0.00392157, 0.01176471, 0.01568627,\n",
       "        0.        , 0.        , 0.01176471],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.02352941, 0.        , 0.4       ,\n",
       "        0.8       , 0.69019608, 0.5254902 , 0.56470588, 0.48235294,\n",
       "        0.09019608, 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.04705882, 0.03921569, 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.60784314,\n",
       "        0.9254902 , 0.81176471, 0.69803922, 0.41960784, 0.61176471,\n",
       "        0.63137255, 0.42745098, 0.25098039, 0.09019608, 0.30196078,\n",
       "        0.50980392, 0.28235294, 0.05882353],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.00392157, 0.        , 0.27058824, 0.81176471,\n",
       "        0.8745098 , 0.85490196, 0.84705882, 0.84705882, 0.63921569,\n",
       "        0.49803922, 0.4745098 , 0.47843137, 0.57254902, 0.55294118,\n",
       "        0.34509804, 0.6745098 , 0.25882353],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.00392157,\n",
       "        0.00392157, 0.00392157, 0.        , 0.78431373, 0.90980392,\n",
       "        0.90980392, 0.91372549, 0.89803922, 0.8745098 , 0.8745098 ,\n",
       "        0.84313725, 0.83529412, 0.64313725, 0.49803922, 0.48235294,\n",
       "        0.76862745, 0.89803922, 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.71764706, 0.88235294,\n",
       "        0.84705882, 0.8745098 , 0.89411765, 0.92156863, 0.89019608,\n",
       "        0.87843137, 0.87058824, 0.87843137, 0.86666667, 0.8745098 ,\n",
       "        0.96078431, 0.67843137, 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.75686275, 0.89411765,\n",
       "        0.85490196, 0.83529412, 0.77647059, 0.70588235, 0.83137255,\n",
       "        0.82352941, 0.82745098, 0.83529412, 0.8745098 , 0.8627451 ,\n",
       "        0.95294118, 0.79215686, 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.00392157,\n",
       "        0.01176471, 0.        , 0.04705882, 0.85882353, 0.8627451 ,\n",
       "        0.83137255, 0.85490196, 0.75294118, 0.6627451 , 0.89019608,\n",
       "        0.81568627, 0.85490196, 0.87843137, 0.83137255, 0.88627451,\n",
       "        0.77254902, 0.81960784, 0.20392157],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.02352941, 0.        , 0.38823529, 0.95686275, 0.87058824,\n",
       "        0.8627451 , 0.85490196, 0.79607843, 0.77647059, 0.86666667,\n",
       "        0.84313725, 0.83529412, 0.87058824, 0.8627451 , 0.96078431,\n",
       "        0.46666667, 0.65490196, 0.21960784],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.01568627,\n",
       "        0.        , 0.        , 0.21568627, 0.9254902 , 0.89411765,\n",
       "        0.90196078, 0.89411765, 0.94117647, 0.90980392, 0.83529412,\n",
       "        0.85490196, 0.8745098 , 0.91764706, 0.85098039, 0.85098039,\n",
       "        0.81960784, 0.36078431, 0.        ],\n",
       "       [0.        , 0.        , 0.00392157, 0.01568627, 0.02352941,\n",
       "        0.02745098, 0.00784314, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.92941176, 0.88627451, 0.85098039,\n",
       "        0.8745098 , 0.87058824, 0.85882353, 0.87058824, 0.86666667,\n",
       "        0.84705882, 0.8745098 , 0.89803922, 0.84313725, 0.85490196,\n",
       "        1.        , 0.30196078, 0.        ],\n",
       "       [0.        , 0.01176471, 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.24313725,\n",
       "        0.56862745, 0.8       , 0.89411765, 0.81176471, 0.83529412,\n",
       "        0.86666667, 0.85490196, 0.81568627, 0.82745098, 0.85490196,\n",
       "        0.87843137, 0.8745098 , 0.85882353, 0.84313725, 0.87843137,\n",
       "        0.95686275, 0.62352941, 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.07058824,\n",
       "        0.17254902, 0.32156863, 0.41960784, 0.74117647, 0.89411765,\n",
       "        0.8627451 , 0.87058824, 0.85098039, 0.88627451, 0.78431373,\n",
       "        0.80392157, 0.82745098, 0.90196078, 0.87843137, 0.91764706,\n",
       "        0.69019608, 0.7372549 , 0.98039216, 0.97254902, 0.91372549,\n",
       "        0.93333333, 0.84313725, 0.        ],\n",
       "       [0.        , 0.22352941, 0.73333333, 0.81568627, 0.87843137,\n",
       "        0.86666667, 0.87843137, 0.81568627, 0.8       , 0.83921569,\n",
       "        0.81568627, 0.81960784, 0.78431373, 0.62352941, 0.96078431,\n",
       "        0.75686275, 0.80784314, 0.8745098 , 1.        , 1.        ,\n",
       "        0.86666667, 0.91764706, 0.86666667, 0.82745098, 0.8627451 ,\n",
       "        0.90980392, 0.96470588, 0.        ],\n",
       "       [0.01176471, 0.79215686, 0.89411765, 0.87843137, 0.86666667,\n",
       "        0.82745098, 0.82745098, 0.83921569, 0.80392157, 0.80392157,\n",
       "        0.80392157, 0.8627451 , 0.94117647, 0.31372549, 0.58823529,\n",
       "        1.        , 0.89803922, 0.86666667, 0.7372549 , 0.60392157,\n",
       "        0.74901961, 0.82352941, 0.8       , 0.81960784, 0.87058824,\n",
       "        0.89411765, 0.88235294, 0.        ],\n",
       "       [0.38431373, 0.91372549, 0.77647059, 0.82352941, 0.87058824,\n",
       "        0.89803922, 0.89803922, 0.91764706, 0.97647059, 0.8627451 ,\n",
       "        0.76078431, 0.84313725, 0.85098039, 0.94509804, 0.25490196,\n",
       "        0.28627451, 0.41568627, 0.45882353, 0.65882353, 0.85882353,\n",
       "        0.86666667, 0.84313725, 0.85098039, 0.8745098 , 0.8745098 ,\n",
       "        0.87843137, 0.89803922, 0.11372549],\n",
       "       [0.29411765, 0.8       , 0.83137255, 0.8       , 0.75686275,\n",
       "        0.80392157, 0.82745098, 0.88235294, 0.84705882, 0.7254902 ,\n",
       "        0.77254902, 0.80784314, 0.77647059, 0.83529412, 0.94117647,\n",
       "        0.76470588, 0.89019608, 0.96078431, 0.9372549 , 0.8745098 ,\n",
       "        0.85490196, 0.83137255, 0.81960784, 0.87058824, 0.8627451 ,\n",
       "        0.86666667, 0.90196078, 0.2627451 ],\n",
       "       [0.18823529, 0.79607843, 0.71764706, 0.76078431, 0.83529412,\n",
       "        0.77254902, 0.7254902 , 0.74509804, 0.76078431, 0.75294118,\n",
       "        0.79215686, 0.83921569, 0.85882353, 0.86666667, 0.8627451 ,\n",
       "        0.9254902 , 0.88235294, 0.84705882, 0.78039216, 0.80784314,\n",
       "        0.72941176, 0.70980392, 0.69411765, 0.6745098 , 0.70980392,\n",
       "        0.80392157, 0.80784314, 0.45098039],\n",
       "       [0.        , 0.47843137, 0.85882353, 0.75686275, 0.70196078,\n",
       "        0.67058824, 0.71764706, 0.76862745, 0.8       , 0.82352941,\n",
       "        0.83529412, 0.81176471, 0.82745098, 0.82352941, 0.78431373,\n",
       "        0.76862745, 0.76078431, 0.74901961, 0.76470588, 0.74901961,\n",
       "        0.77647059, 0.75294118, 0.69019608, 0.61176471, 0.65490196,\n",
       "        0.69411765, 0.82352941, 0.36078431],\n",
       "       [0.        , 0.        , 0.29019608, 0.74117647, 0.83137255,\n",
       "        0.74901961, 0.68627451, 0.6745098 , 0.68627451, 0.70980392,\n",
       "        0.7254902 , 0.7372549 , 0.74117647, 0.7372549 , 0.75686275,\n",
       "        0.77647059, 0.8       , 0.81960784, 0.82352941, 0.82352941,\n",
       "        0.82745098, 0.7372549 , 0.7372549 , 0.76078431, 0.75294118,\n",
       "        0.84705882, 0.66666667, 0.        ],\n",
       "       [0.00784314, 0.        , 0.        , 0.        , 0.25882353,\n",
       "        0.78431373, 0.87058824, 0.92941176, 0.9372549 , 0.94901961,\n",
       "        0.96470588, 0.95294118, 0.95686275, 0.86666667, 0.8627451 ,\n",
       "        0.75686275, 0.74901961, 0.70196078, 0.71372549, 0.71372549,\n",
       "        0.70980392, 0.69019608, 0.65098039, 0.65882353, 0.38823529,\n",
       "        0.22745098, 0.        , 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.15686275, 0.23921569, 0.17254902,\n",
       "        0.28235294, 0.16078431, 0.1372549 , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        ],\n",
       "       [0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        , 0.        , 0.        ,\n",
       "        0.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for the shape of dependent and independent variable.\n",
    "x_train[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c133bc00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(28, 28)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train[0].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba424740",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000,)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5f176677",
   "metadata": {},
   "outputs": [],
   "source": [
    "#reshaping the each image into the gray image.\n",
    "x_train=x_train.reshape(len(x_train),28,28,1)\n",
    "x_test=x_test.reshape(len(x_test),28,28,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9e5793fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(60000, 28, 28, 1)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1e0f9ca9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([9, 0, 0, ..., 3, 0, 5], dtype=uint8)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "72a054d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating the validation dataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train,x_val,y_train,y_val=train_test_split(x_train,y_train,test_size=0.3, random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3584c7b4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1a2620f3040>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.matshow(x_train[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c6e61b04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Building the Convolutional Neural Network  Model\n",
    "# Applying the Hyperparameter tuning concept\n",
    "\n",
    "#In this model we used the relu activation and Adam optimizer. Since they are simple and efficient.\n",
    "\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "def build_model(hp):\n",
    "    model=keras.Sequential([\n",
    "       keras.layers.Conv2D(\n",
    "           filters=hp.Int('conv_1_filter',min_value=32, max_value=512,step=32),\n",
    "           kernel_size=hp.Choice('conv_1_kernel',values=[3,]),\n",
    "           activation='relu',\n",
    "           padding='same',\n",
    "           input_shape=(28,28,1)),\n",
    "        \n",
    "        keras.layers.MaxPooling2D((2,2)),\n",
    "        keras.layers.Dropout(0.25),\n",
    "        \n",
    "        keras.layers.Conv2D(\n",
    "            filters=hp.Int('conv_2_filter',min_value=32, max_value=128,step=32),\n",
    "            kernel_size=hp.Choice('conv_2_kernel',values=[3,]),\n",
    "            padding='same',\n",
    "            activation='relu'),\n",
    "        \n",
    "    \n",
    "        \n",
    "        keras.layers.Flatten(),\n",
    "        keras.layers.Dense(units=hp.Int('dense_1_unit',min_value=32, max_value=512,step=32),\n",
    "            activation='relu'),\n",
    "        keras.layers.Dense(\n",
    "            units=hp.Int('dense_2_unit',min_value=32, max_value=128,step=16),\n",
    "            activation='relu'),\n",
    "        keras.layers.Dropout(0.5),\n",
    "        keras.layers.Dense(10,activation='softmax')])\n",
    "    \n",
    "    model.compile(optimizer=Adam(hp.Choice('learning_rate',values=[0.01,0.001,0.0001,0.00001])),loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "78dea665",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras_tuner import RandomSearch\n",
    "from keras_tuner.engine.hyperparameters import HyperParameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c549a67e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Reloading Oracle from existing project output\\mnist 1\\oracle.json\n",
      "INFO:tensorflow:Reloading Tuner from output\\mnist 1\\tuner0.json\n"
     ]
    }
   ],
   "source": [
    "tuner_search=RandomSearch(build_model,objective='accuracy',max_trials=5,directory='output',project_name='mnist 1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bf29c37c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(42000, 28, 28, 1)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "099d3544",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Oracle triggered exit\n"
     ]
    }
   ],
   "source": [
    "tuner_search.search(x_train,y_train,validation_data=(x_val,y_val),epochs=3,batch_size=200,verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ebc57107",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results summary\n",
      "Results in output\\mnist 1\n",
      "Showing 10 best trials\n",
      "Objective(name='accuracy', direction='max')\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "conv_1_filter: 352\n",
      "conv_1_kernel: 3\n",
      "conv_2_filter: 64\n",
      "conv_2_kernel: 3\n",
      "dense_1_unit: 128\n",
      "dense_2_unit: 80\n",
      "learning_rate: 0.001\n",
      "Score: 0.8914762139320374\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "conv_1_filter: 128\n",
      "conv_1_kernel: 3\n",
      "conv_2_filter: 64\n",
      "conv_2_kernel: 3\n",
      "dense_1_unit: 448\n",
      "dense_2_unit: 128\n",
      "learning_rate: 0.01\n",
      "Score: 0.8715476393699646\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "conv_1_filter: 160\n",
      "conv_1_kernel: 3\n",
      "conv_2_filter: 128\n",
      "conv_2_kernel: 3\n",
      "dense_1_unit: 416\n",
      "dense_2_unit: 32\n",
      "learning_rate: 0.01\n",
      "Score: 0.8258571624755859\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "conv_1_filter: 256\n",
      "conv_1_kernel: 3\n",
      "conv_2_filter: 32\n",
      "conv_2_kernel: 3\n",
      "dense_1_unit: 416\n",
      "dense_2_unit: 112\n",
      "learning_rate: 1e-05\n",
      "Score: 0.6911666393280029\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "conv_1_filter: 352\n",
      "conv_1_kernel: 3\n",
      "conv_2_filter: 64\n",
      "conv_2_kernel: 3\n",
      "dense_1_unit: 64\n",
      "dense_2_unit: 80\n",
      "learning_rate: 1e-05\n",
      "Score: 0.5719285607337952\n"
     ]
    }
   ],
   "source": [
    "#checking the best model parameters\n",
    "tuner_search.results_summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ed4d0777",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=tuner_search.get_best_models(num_models=1)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0a0efa35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 28, 28, 352)       3520      \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 14, 14, 352)       0         \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 14, 14, 352)       0         \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 14, 14, 64)        202816    \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 12544)             0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 128)               1605760   \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 80)                10320     \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 80)                0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 10)                810       \n",
      "=================================================================\n",
      "Total params: 1,823,226\n",
      "Trainable params: 1,823,226\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aba7c515",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 4/10\n",
      "1313/1313 [==============================] - 326s 248ms/step - loss: 0.3384 - accuracy: 0.8818 - val_loss: 0.2653 - val_accuracy: 0.9018\n",
      "Epoch 5/10\n",
      "1313/1313 [==============================] - 356s 271ms/step - loss: 0.2627 - accuracy: 0.9065 - val_loss: 0.2606 - val_accuracy: 0.9042\n",
      "Epoch 6/10\n",
      "1313/1313 [==============================] - 341s 260ms/step - loss: 0.2204 - accuracy: 0.9192 - val_loss: 0.2427 - val_accuracy: 0.9140\n",
      "Epoch 7/10\n",
      "1313/1313 [==============================] - 361s 275ms/step - loss: 0.1920 - accuracy: 0.9291 - val_loss: 0.2382 - val_accuracy: 0.9177\n",
      "Epoch 8/10\n",
      "1313/1313 [==============================] - 368s 280ms/step - loss: 0.1666 - accuracy: 0.9375 - val_loss: 0.2443 - val_accuracy: 0.9160\n",
      "Epoch 9/10\n",
      "1313/1313 [==============================] - 369s 281ms/step - loss: 0.1447 - accuracy: 0.9460 - val_loss: 0.2678 - val_accuracy: 0.9189\n",
      "Epoch 10/10\n",
      "1302/1313 [============================>.] - ETA: 2s - loss: 0.1286 - accuracy: 0.9533"
     ]
    }
   ],
   "source": [
    "model.fit(x_train,y_train,validation_data=(x_val,y_val),epochs=10,initial_epoch=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ed72cd7",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=model(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e59c1f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
